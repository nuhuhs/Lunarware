-- https://raw.githubusercontent.com/nuhuhs/LunarUI

repeat wait() until game:IsLoaded();

-- LunarUI

local players = game:GetService("Players");
local workspace = game:GetService("Workspace");
local RunService = game:GetService("RunService");
local TextService = game:GetService('TextService');
local UserInputService = game:GetService("UserInputService");
local TweenService = game:GetService("TweenService");
local CoreGui = game:GetService("CoreGui");
local client = players.LocalPlayer;
local Mouse = client:GetMouse();

local function RGB(r, g, b)
    local r, g, b = r or 0, g or 0, b or 0;

    return Color3.fromRGB(r, g, b);
end;

local function TableLength(Table)
    local Length = 0;

    for _, __ in pairs(Table) do
        Length = Length + 1;
    end;

    return Length;
end;

local Funcs = {};
local Library = {
    Storage = {},
    CreatedTabs = {},

    Font = Enum.Font.Code,
    _Theme = "Default",
    _Themes = {
        ['Default'] = { ["Background"] = RGB(20, 20, 20), ['Background2'] = RGB(0, 0, 0), ["Accent1"] = RGB(131, 131, 170), ["Accent2"] = RGB(131, 131, 170), ["Accent3"] = RGB(131, 131, 170), ["TextColor"] = RGB(180, 180, 180), ['IconColor'] = RGB(255, 255, 255) },
    },

    Signals = {},
    Toggles = {},
    Flags = {},
    FlagInstances = {},

    Folder = "LunarUI",
    SecondaryFolder = "",
    SavePath = "/SaveData.lua",
    ThemePath = "/ThemeData.lua",

    ScreenUI = nil
};

getgenv().Library = Library;

function Library:SetFolder(Path, Secondary)
    if Secondary then
        Library.SecondaryFolder = "//" .. Path;
    else
        Library.Folder = Path;
    end;
end;

function Library:Save()
    local SavePath = Library.Folder .. Library.SecondaryFolder .. Library.SavePath;
    local ThemePath = Library.Folder .. Library.SecondaryFolder .. Library.ThemePath;
    local saveString = "";

    for i, v in next, (Library.Flags) do
        if typeof(v) == 'string' then
            v = "'" .. v .. "'";
        end;

        saveString = saveString .. "getgenv().Library['Flags']['" .. tostring(i) .. "']=" .. tostring(v) .. "; ";
    end;

    writefile(SavePath, saveString);
end;

function Library:LoadSettings()
    local SavePath = Library.Folder .. Library.SecondaryFolder .. Library.SavePath;
    local ThemePath = Library.Folder .. Library.SecondaryFolder .. Library.ThemePath;

    if (not isfile) or not isfile(SavePath) then return; end;

    print(readfile(SavePath));
    runfile(SavePath);

    for i, v in next, (Library.FlagInstances) do
        v:Load();
        print(tostring(i));
    end;
end;

function Library:Unload()
    for i, v in pairs(Library.Signals) do
        v:Disconnect();
    end;

    for i, v in pairs(Library.Toggles) do
        v:Destroy();
    end;

    Library.ScreenUI:Destroy();

    return;
end

function Library.Visible(Value)
    if not Library.ScreenUI then return; end;

    if Value ~= nil then
        Library.ScreenUI.Enabled = Value;
    else
        Library.ScreenUI.Enabled = not Library.ScreenUI.Enabled;
    end
end

local function AutoSize(object, padding)
    if not object then return; end;

    local UIPadding = object:FindFirstChildOfClass("UIPadding");
    local padding = padding or 0;
    local SizeConnections = {};
    local function UpdateSize(...)
        if not object then return; end;
        local totalPixels = 0;
        for i, v in next, (object:GetChildren()) do
            if v:IsA("GuiObject") and v.Visible then
                if not SizeConnections[v] then
                    local connection = v:GetPropertyChangedSignal("Size"):Connect(UpdateSize);
                    SizeConnections[v] = connection;
                    Library.Signals[v] = connection;
                end

                local ySize = v.AbsoluteSize.Y;

                totalPixels = totalPixels + (ySize + padding);
            end
        end

        if UIPadding then
            totalPixels = totalPixels + ((UIPadding.PaddingBottom.Offset + UIPadding.PaddingTop.Offset));
        end;

        if object:IsA("ScrollingFrame") then
            object.CanvasSize = UDim2.new(object.CanvasSize.X.Scale, object.CanvasSize.X.Offset, 0, totalPixels + 6);
        else
            object.Size = UDim2.new(object.Size.X.Scale, object.Size.X.Offset, 0, totalPixels + 6);
        end
    end

    UpdateSize();

    object.ChildAdded:Connect(UpdateSize);
    object.ChildRemoved:Connect(UpdateSize);
end;

do -- LOAD KEY RECORDER
    function Library.RecordPress(inputType, validInputs, callback, breakOnRecord)
        local callback = callback or function(...) end;
        local received;
        local InputRecord;
        InputRecord = UserInputService.InputBegan:Connect(function(input, isTyping)
            if isTyping and input.KeyCode ~= Enum.KeyCode.Unknown then return; end;

            if input.KeyCode == Enum.KeyCode.Backspace then
                InputRecord:Disconnect();
                callback(nil);

                received = "Backspace";
                return received;
            end

            if validInputs then
                local pressed;

                if input.KeyCode ~= Enum.KeyCode.Unknown then
                    pressed = tostring(input.KeyCode.Name);
                else
                    pressed = tostring(input.UserInputType.Name);
                end

                if (table.find(validInputs, pressed)) or (table.find(validInputs, string.lower(pressed))) or (table.find(validInputs, string.upper(pressed))) then
                    if breakOnRecord then
                        InputRecord:Disconnect();
                    end
                    received = pressed;
                    callback(received);
                end
            else
                if inputType == "KeyCode" then
                    if input.KeyCode ~= Enum.KeyCode.Unknown then
                        if breakOnRecord then
                            InputRecord:Disconnect();
                        end
                        received = tostring(input.KeyCode.Name);
                        callback(received);
                    end
                else
                    if input.UserInputType and input.KeyCode == Enum.KeyCode.Unknown then
                        if breakOnRecord then
                            InputRecord:Disconnect();
                        end
                        received = tostring(input.UserInputType.Name);
                        callback(received);
                    end
                end
            end
        end)

        return InputRecord;
    end

    function Library.RecordRelease(inputType, validInputs, callback, breakOnRecord)
        local callback = callback or function(...) end;
        local received;
        local InputRecord;
        InputRecord = UserInputService.InputEnded:Connect(function(input, isTyping)
            if isTyping and input.KeyCode ~= Enum.KeyCode.Unknown then return; end;

            if input.KeyCode == Enum.KeyCode.Backspace then
                if breakOnRecord then
                    InputRecord:Disconnect();
                end

                received = "Backspace";
                return received;
            end

            if validInputs then
                local pressed;

                if input.KeyCode ~= Enum.KeyCode.Unknown then
                    pressed = tostring(input.KeyCode.Name);
                else
                    pressed = tostring(input.UserInputType.Name);
                end

                if (table.find(validInputs, string.lower(pressed))) or (table.find(validInputs, string.upper(pressed))) then
                    if breakOnRecord then
                        InputRecord:Disconnect();
                    end
                    received = pressed;
                    callback(received);
                    return received;
                end
            else
                if inputType == "KeyCode" then
                    if input.KeyCode ~= Enum.KeyCode.Unknown then
                        if breakOnRecord then
                            InputRecord:Disconnect();
                        end
                        received = tostring(input.KeyCode.Name);
                        callback(received);
                        return received;
                    end
                else
                    if input.UserInputType and input.KeyCode == Enum.KeyCode.Unknown then
                        if breakOnRecord then
                            InputRecord:Disconnect();
                        end
                        received = tostring(input.UserInputType.Name);
                        callback(received);
                        return received;
                    end
                end
            end
        end)

        return InputRecord;
    end;

    function GetInteraction(inputType, validInputs, callback)
        local record1;
        local record2;

        local oldCallback = callback;

        callback = function()
            oldCallback();

            if record1 then
                record1:Disconnect();
            end

            if record2 then
                record2:Disconnect();
            end
        end

        record1 = Library.RecordPress(inputType, validInputs, callback);
        record2 = Library.RecordRelease(inputType, validInputs, callback);
    end
end;

function Library:Register(Obj, Properties)
    if (not Obj) or (not Properties) then return; end;

    local Data = {
        Instance = Obj,
        Properties = Properties,
    };

    Library.Storage[Obj] = Data;
end;

function Library:Unregister(Obj)
    if not Obj then return; end;
    Library.Storage[Obj] = nil;
end;

function Library:Create(Class, Properties)
    local _Instance = Class;

    if type(Class) == 'string' then
        _Instance = Instance.new(Class);
    end;

    for Property, Value in next, Properties do
        _Instance[Property] = Value;
    end;

    return _Instance;
end;

function Library.ApplyUIPadding(Obj)
    if not Obj then return; end;

    local UIPadding = Library:Create("UIPadding", {
        Parent = Obj,
        PaddingLeft = UDim.new(0, 5),
        PaddingRight = UDim.new(0, 5),
        PaddingBottom = UDim.new(0, 5),
        PaddingTop = UDim.new(0, 5)
    });


    return UIPadding;
end;

function Library.ApplyUIStroke(Obj, LineJoinMode)
    if not Obj then return; end;

    local LineJoinMode = LineJoinMode or "Miter";

    local UIStroke = Library:Create("UIStroke", {
        Parent = Obj,
        LineJoinMode = Enum.LineJoinMode[LineJoinMode],
    });

    do -- Class Check
        pcall(function()
            UIStroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border;
            if Obj.Text then
                UIStroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Contextual;
                return;
            end
        end)
    end

    return UIStroke;
end;

function Library:CreateLabel(Properties)
    local TextLabel = Library:Create("TextLabel", Properties);
    local UIStroke = Library.ApplyUIStroke(TextLabel);


    return TextLabel, UIStroke;
end;

function Library:CreateButton(Properties)
    local TextLabel = Library:Create("TextButton", Properties);
    local UIStroke = Library.ApplyUIStroke(TextLabel);


    return TextLabel, UIStroke;
end;

function Library:GetTextBounds(Text, Font, Size, Resolution)
    local Bounds = TextService:GetTextSize(Text, Size, Font, Resolution or Vector2.new(1920, 1080))
    return Bounds.X, Bounds.Y
end;

function Library:MakeDraggable(Click, Frame)
    local dragging;
    local dragInput;
    local dragStart;
    local startPos;

    local function update(input)
        local delta = input.Position - dragStart;
        Frame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale,
            startPos.Y.Offset + delta.Y);
    end;

    Click.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = true;
            dragStart = input.Position;
            startPos = Frame.Position;

            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false;
                end;
            end);
        end;
    end);

    Click.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
            dragInput = input;
        end;
    end);

    UserInputService.InputChanged:Connect(function(input)
        if input == dragInput and dragging then
            update(input);
        end;
    end);
end;

function UpdateColors()
    local _Theme = Library._Theme;
    local Themes = Library._Themes;
    local CTheme = Themes[_Theme];

    if not CTheme then return; end;

    for i, v in pairs(Library.Storage) do
        local Obj = v.Instance;
        local Properties = v.Properties;

        for idx, val in next, (Properties) do
            if CTheme[val] then
                Obj[idx] = CTheme[val];
            end;
        end;
    end;
end;

function Library:CreateWindow(Title, Settings)
    local Window = {};
    local Title, Settings = Title or "LunarUI", Settings or {};

    local NotCenter = Settings.NotCenter or false;

    local ScreenUI = Library:Create("ScreenGui", { Parent = CoreGui, ZIndexBehavior = Enum.ZIndexBehavior.Global });
    Library.ScreenUI = ScreenUI;

    local SpawnPos = UDim2.new(0.5, 0, 0.5, 0);

    if NotCenter then
        SpawnPos = UDim2.new(0.2, 0, 0.25, 0)
    end;

    local WindowFrame = Library:Create("ImageLabel", {
        Parent = ScreenUI,
        AnchorPoint = Vector2.new(0.5, 0.5),
        BackgroundColor3 = Color3.new(1, 1, 1),
        BackgroundTransparency = 1,
        BorderColor3 = Color3.new(0, 0, 0),
        BorderSizePixel = 0,
        Position = SpawnPos,
        Size = UDim2.new(0.5, 0, 0.5, 0),
        ZIndex = 99,
        Image = "http://www.roblox.com/asset/?id=16873490686"
    });

    local WindowMain = Library:Create("Frame", {
        Parent = WindowFrame,
        AnchorPoint = Vector2.new(0.5, 1),
        BackgroundColor3 = Color3.new(0.0784314, 0.0784314, 0.0784314),
        BackgroundTransparency = 0.2,
        BorderColor3 = Color3.new(0, 0, 0),
        BorderSizePixel = 0,
        Position = UDim2.new(0.5, 0, 0.999999881, 0),
        Size = UDim2.new(1, 0, 0.850000024, 0),
        ZIndex = 101
    })

    local WindowTopbar = Library:Create("Frame", {
        Parent = WindowFrame,
        AnchorPoint = Vector2.new(0.5, 0),
        BackgroundTransparency = 0.6,
        BorderColor3 = Color3.new(0, 0, 0),
        BorderSizePixel = 0,
        Position = UDim2.new(0.5, 0, 0, 0),
        Size = UDim2.new(1, 0, 0.075000003, 0),
        ZIndex = 100
    });

    local WindowTitle = Library:CreateLabel({
        Parent = WindowTopbar,
        AnchorPoint = Vector2.new(0, 0.5),
        BackgroundColor3 = Color3.new(1, 1, 1),
        BackgroundTransparency = 1,
        BorderColor3 = Color3.new(0, 0, 0),
        BorderSizePixel = 0,
        Position = UDim2.new(0, 10, 0.5, 0),
        Size = UDim2.new(0.230000004, 0, 0.75, 0),
        ZIndex = 100,
        Font = Library.Font,
        Text = Title,
        TextSize = 15,
        TextXAlignment = Enum.TextXAlignment.Left
    });

    local WindowClose = Library:Create("ImageButton", {
        Parent = WindowTopbar,
        AnchorPoint = Vector2.new(1, 0.5),
        BackgroundColor3 = Color3.new(1, 1, 1),
        BackgroundTransparency = 1,
        BorderColor3 = Color3.new(0, 0, 0),
        BorderSizePixel = 0,
        Position = UDim2.new(1, -2, 0.5, 0),
        Size = UDim2.new(0, 0, 0.800000012, 0),
        ZIndex = 100,
        Image = "rbxassetid://3926305904",
        ImageRectOffset = Vector2.new(284, 4),
        ImageRectSize = Vector2.new(24, 24)
    });

    local WindowTabHolder = Library:Create("Frame", {
        Parent = WindowTopbar,
        BackgroundTransparency = 0.6,
        BorderColor3 = Color3.new(0, 0, 0),
        BorderSizePixel = 0,
        Position = UDim2.new(0, 0, 1, 2),
        Size = UDim2.new(1, 0, 0.9, 0),
        ZIndex = 101
    });

    Library:Create("ImageLabel", { -- Shadow
        Parent = WindowFrame,
        AnchorPoint = Vector2.new(0.5, 0.5),
        BackgroundTransparency = 1,
        BorderSizePixel = 0,
        Position = UDim2.new(0.5, 0, 0.5, 0),
        Size = UDim2.new(1, 47, 1, 47),
        ZIndex = 98,
        Image = "rbxassetid://6015897843",
        ImageColor3 = Color3.new(0, 0, 0),
        ImageTransparency = 0.5,
        ScaleType = Enum.ScaleType.Slice,
        SliceCenter = Rect.new(49, 49, 450, 450)
    });

    Library:MakeDraggable(WindowTopbar, WindowFrame);
    Library.ApplyUIPadding(WindowTabHolder);
    Library:Create("UIListLayout", {
        Parent = WindowTabHolder,
        SortOrder = Enum.SortOrder.LayoutOrder,
        FillDirection = Enum.FillDirection.Horizontal,
        VerticalAlignment = Enum.VerticalAlignment.Center,
    });

    Library:Create("UIAspectRatioConstraint", {
        Parent = WindowClose,
        AspectType = Enum.AspectType.ScaleWithParentSize,
        DominantAxis = Enum.DominantAxis.Height
    });

    Library:Create("UIAspectRatioConstraint", {
        Parent = WindowFrame,
        AspectRatio = 1.5384999513626099
    });

    Library:Create("UISizeConstraint", {
        Parent = WindowFrame,
        MaxSize = Vector2.new(550, 325),
        MinSize = Vector2.new(350, 227.5)
    });

    local WindowStroke_1 = Library.ApplyUIStroke(WindowFrame);
    local WindowStroke_2 = Library.ApplyUIStroke(WindowTopbar);
    local WindowStroke_3 = Library.ApplyUIStroke(WindowTabHolder);

    Library:Register(WindowTopbar, { BackgroundColor3 = "Background2" });
    Library:Register(WindowTabHolder, { BackgroundColor3 = "Background2" });
    Library:Register(WindowStroke_1, { Color = "Accent1" });
    Library:Register(WindowStroke_2, { Color = "Accent1" });
    Library:Register(WindowStroke_3, { Color = "Accent1" });

    Library:Register(WindowClose, { ImageColor3 = "IconColor" });
    Library:Register(WindowTitle, { TextColor3 = "TextColor" });

    WindowClose.MouseButton1Click:Connect(function()
        Library.Visible(false);
    end);

    RunService.Heartbeat:Connect(UpdateColors);

    function Window:CreateTab(Title, Settings)
        local Title = Title or "Tab";
        local Tab, Settings = {}, Settings or {};
        local LayoutOrder = Settings.LayoutOrder or 0;

        local TabFrame = Library:Create("Frame", {
            Parent = WindowMain,
            AnchorPoint = Vector2.new(0.5, 0.5),
            BackgroundTransparency = 0.8,
            BorderColor3 = Color3.new(0, 0, 0),
            BorderSizePixel = 0,
            Position = UDim2.new(0.5, 0, 0.5, 0),
            Size = UDim2.new(0.980000019, 0, 0.949999988, 0),
            ZIndex = 101,
        });

        if #Library.CreatedTabs == 0 then
            TabFrame.Visible = true;
        else
            TabFrame.Visible = false;
        end;

        local TabScrolling = Library:Create("ScrollingFrame", {
            Parent = TabFrame,
            BackgroundTransparency = 1,
            BorderSizePixel = 0,
            Size = UDim2.new(1, 0, 1, 0),
            ZIndex = 102,
            CanvasSize = UDim2.new(0, 0, 1, 0),
            ScrollBarThickness = 1
        });

        local TabX, TabY = Library:GetTextBounds(Title, Library.Font, 14);

        local TabButton = Library:CreateButton({
            Parent = WindowTabHolder,
            Text = Title,
            BackgroundTransparency = 1,
            ZIndex = 106,
            Font = Library.Font,
            TextScaled = true,
            LayoutOrder = LayoutOrder,
            Size = UDim2.new(0, TabX + 12, 1, 0)
        });

        Library:Create("UITextSizeConstraint", { Parent = TabButton, MaxTextSize = 14 });
        Library:Create("UIListLayout", {
            Parent = TabScrolling,
            HorizontalAlignment = Enum.HorizontalAlignment.Center,
            SortOrder = Enum.SortOrder.LayoutOrder,
            Padding = UDim.new(0, 5)
        });
        Library.ApplyUIPadding(TabScrolling);

        local TabStroke_1 = Library.ApplyUIStroke(TabFrame);

        Library:Register(TabStroke_1, { Color = "Accent2" });
        Library:Register(TabButton, { TextColor3 = "TextColor" });
        Library:Register(TabFrame, { BackgroundColor3 = "Background" });
        AutoSize(TabScrolling, 5);

        table.insert(Library.CreatedTabs, TabFrame);

        TabButton.MouseButton1Click:Connect(function()
            for i, v in pairs(Library.CreatedTabs) do
                if v then
                    v.Visible = false;
                end
            end

            TabFrame.Visible = true;
        end);

        function Tab:CreateSection(Title, Settings)
            local Title = Title or "Section";
            local Section, Settings = {}, Settings or {};
            local LayoutOrder = Settings.LayoutOrder or 0;

            local SectionHolder = Library:Create("Frame", {
                Parent = TabScrolling,
                BackgroundTransparency = 1,
                BorderSizePixel = 0,
                ZIndex = 103,
                Size = UDim2.new(0.95, 0, 0, 0),
                LayoutOrder = LayoutOrder
            });

            local SectionTitle = Library:CreateLabel({
                Parent = SectionHolder,
                BackgroundTransparency = 1,
                BorderSizePixel = 0,
                Position = UDim2.new(0, 0, 0.05, 0),
                Size = UDim2.new(1, 0, 0, 25),
                ZIndex = 104,
                Font = Library.Font,
                Text = Title,
                TextScaled = true,
                TextSize = 14,
                TextWrapped = true,
                TextXAlignment = Enum.TextXAlignment.Left,
                LayoutOrder = -1,
            });

            local SectionFrame = Library:Create("Frame", {
                Parent = SectionHolder,
                AnchorPoint = Vector2.new(0, 1),
                BackgroundTransparency = 0.6,
                BorderSizePixel = 0,
                ClipsDescendants = true,
                Position = UDim2.new(0, 0, 1, 0),
                ZIndex = 104,
                Size = UDim2.new(1, 0, .9, 0),
            });

            AutoSize(SectionHolder, 5);
            AutoSize(SectionFrame, 5);

            Library:Create("UIListLayout", {
                Parent = SectionFrame,
                HorizontalAlignment = Enum.HorizontalAlignment.Center,
                SortOrder = Enum.SortOrder.LayoutOrder,
                Padding = UDim.new(0, 5),
            });
            Library.ApplyUIPadding(SectionFrame);
            Library:Create("UIListLayout", { Parent = SectionHolder, SortOrder = Enum.SortOrder.LayoutOrder, });
            Library:Create("UICorner", { Parent = SectionHolder, CornerRadius = UDim.new(0, 6), });
            Library:Create("UICorner", { Parent = SectionFrame, CornerRadius = UDim.new(0, 6), });
            Library:Create("UISizeConstraint", { Parent = SectionTitle, MaxSize = Vector2.new(math.huge, 25), });
            Library:Create("UITextSizeConstraint", { Parent = SectionTitle, MaxTextSize = 14, });

            Library:Register(SectionFrame, { BackgroundColor3 = "Background2" });
            Library:Register(SectionTitle, { TextColor3 = "TextColor" });

            function Section:CreateLabel(Settings)
                local Label, Settings = {}, Settings or {};
                local Text = Settings.Text or "Label";
                local LayoutOrder = Settings.LayoutOrder or 0;

                local LabelFrame = Library:Create("Frame",
                    { Parent = SectionFrame, Size = UDim2.new(1, 0, 0, 25), LayoutOrder = LayoutOrder });
                local LabelLabel = Library:CreateLabel({
                    Parent = LabelFrame,
                    BackgroundTransparency = 1,
                    ZIndex = 105,
                    TextXAlignment =
                        Enum.TextXAlignment.Left,
                });

                local function Update()
                    LabelLabel.Text = Text;
                end;

                function Label:SetText(nText)
                    Text = nText or "";
                    Update();
                end;

                Library:Register(LabelLabel, { TextColor3 = "TextColor" });
                Update();

                return Label;
            end;

            function Section:CreateDivider(Settings)
                local Divider, Settings = {}, Settings or {};
                local Size = Settings.Size or 12;
                local LayoutOrder = Settings.LayoutOrder or 0;

                local DividerOutside = Library:Create("Frame", {
                    Parent = SectionFrame,
                    BackgroundTransparency = 0,
                    BorderSizePixel = 0,
                    Size = UDim2.new(1, 0, 0, Size),
                    ZIndex = 105,
                    LayoutOrder = LayoutOrder
                });



                Library:Create("UICorner", { Parent = DividerOutside, CornerRadius = UDim.new(0, 4), });
                local DividerStroke = Library.ApplyUIStroke(DividerOutside, "Round");
                Library.ApplyUIPadding(DividerOutside);
                Library:Register(DividerOutside, { BackgroundColor3 = "Background2" });
                Library:Register(DividerStroke, { Color = "Accent2" });

                local function Update()
                    DividerOutside.Size = UDim2.new(1, 0, 0, Size);
                end;

                function Divider:SetSize(nSize)
                    Size = nSize;
                    Update();
                end;

                return Divider;
            end;

            function Section:CreateButton(Settings)
                local Button, Settings = {}, Settings or {};
                local Text = Settings.Text or "Button";
                local LayoutOrder = Settings.LayoutOrder or 0;

                local ButtonFrame = Library:Create("Frame",
                    { Parent = SectionFrame, Size = UDim2.new(1, 0, 0, 25), LayoutOrder = LayoutOrder });

                local ButtonLabel = Library:CreateLabel({
                    Parent = ButtonFrame,
                    BackgroundTransparency = 1,
                    BorderSizePixel = 0,
                    Position = UDim2.new(0, 5, 0, 0),
                    Size = UDim2.new(0.6, 0, 1, 0),
                    ZIndex = 106,
                    Font = Library.Font,
                    Text = Text,
                    TextScaled = true,
                    TextSize = 14,
                    TextWrapped = true,
                    TextXAlignment = Enum.TextXAlignment.Left,
                });

                local ButtonClick = Library:Create("TextButton", {
                    Parent = ButtonFrame,
                    BackgroundTransparency = 1,
                    Text = "",
                    Size = UDim2.new(1, 0, 1, 0),
                    ZIndex = 110,
                });

                Library.ApplyUIPadding(ButtonFrame);
                Library:Create("UITextSizeConstraint", { Parent = ButtonLabel, MaxTextSize = 16, });
                Library:Register(ButtonLabel, { TextColor3 = "TextColor" });
                Library:Register(ButtonFrame, { BackgroundColor3 = "Background2" });

                local Callback = Settings.Callback or function(...) end;

                local function Update()
                    ButtonLabel.Text = Text;
                end;

                function Button:SetText(nText)
                    Text = nText or "";
                    Update();
                end;

                function Button:Fire()
                    Callback();
                end;

                ButtonClick.MouseButton1Click:Connect(Callback);

                return Button;
            end;

            function Section:CreateToggle(Settings)
                local Settings = Settings or {};
                local Toggle = { Default = Settings.Default or false, Value = Settings.Default or false };
                local Text = Settings.Text or "Toggle";
                local LayoutOrder = Settings.LayoutOrder or 0;
                local Flag = Settings.Flag or nil;

                if Flag then
                    Library.FlagInstances[Flag] = Toggle;
                end;

                local ToggleFrame = Library:Create("Frame", {
                    Parent = SectionFrame,
                    BackgroundColor3 = Color3.new(0, 0, 0),
                    BackgroundTransparency = 1,
                    BorderColor3 = Color3.new(0, 0, 0),
                    BorderSizePixel = 0,
                    Position = UDim2.new(-6.62688535e-08, 0, 0, 0),
                    Size = UDim2.new(1.00000012, 0, 0, 25),
                    ZIndex = 105,
                    LayoutOrder = LayoutOrder
                });

                local ToggleLabel = Library:CreateLabel({
                    Parent = ToggleFrame,
                    BackgroundTransparency = 1,
                    BorderColor3 = Color3.new(0, 0, 0),
                    BorderSizePixel = 0,
                    Position = UDim2.new(0, 5, 0, 0),
                    Size = UDim2.new(0.600000024, 0, 1, 0),
                    ZIndex = 106,
                    Font = Library.Font,
                    Text = Text,
                    TextScaled = true,
                    TextSize = 14,
                    TextWrapped = true,
                    TextXAlignment = Enum.TextXAlignment.Left,
                });

                local ToggleBackground = Library:Create("Frame", {
                    Parent = ToggleFrame,
                    AnchorPoint = Vector2.new(1, 0),
                    BackgroundColor3 = Color3.new(0.0784314, 0.0784314, 0.0784314),
                    BackgroundTransparency = 0.20000000298023224,
                    BorderColor3 = Color3.new(0, 0, 0),
                    BorderSizePixel = 0,
                    Position = UDim2.new(1, 0, 0, 0),
                    Size = UDim2.new(0.150000006, 0, 1, 0),
                    ZIndex = 106,
                });

                local ToggleSlider = Library:Create("Frame", {
                    Parent = ToggleBackground,
                    BackgroundColor3 = Color3.new(1, 1, 1),
                    BorderColor3 = Color3.new(0, 0, 0),
                    BorderSizePixel = 0,
                    Size = UDim2.new(0.5, 0, 1, 0),
                    ZIndex = 106,
                });

                local ToggleClick = Library:Create("TextButton", {
                    Parent = ToggleFrame,
                    BackgroundTransparency = 1,
                    Text = "",
                    Size = UDim2.new(1, 0, 1, 0),
                    ZIndex = 110,
                });

                Library.ApplyUIPadding(ToggleFrame);
                Library:Create("UICorner", { Parent = ToggleBackground, CornerRadius = UDim.new(1, 0), });
                Library:Create("UICorner", { Parent = ToggleSlider, CornerRadius = UDim.new(1, 0), });
                Library:Create("UIAspectRatioConstraint", { Parent = ToggleBackground, AspectRatio = 2, });
                Library:Create("UITextSizeConstraint", { Parent = ToggleLabel, MaxTextSize = 16, });

                Library:Register(ToggleLabel, { TextColor3 = "TextColor" });
                Library:Register(ToggleFrame, { BackgroundColor3 = "Background2" });
                Library:Register(ToggleBackground, { BackgroundColor3 = "Background2" });

                local Callback = Settings.Callback or function(...) end;
                local Idx = TableLength(Library.Toggles) + 1;

                local function SaveFlag()
                    if Flag then
                        Library.Flags[Flag] = Toggle.Value;
                    end;

                    Library:Save();
                end;

                local function Update()
                    Library.Toggles[Idx] = Toggle;
                    ToggleLabel.Text = Text;

                    if Toggle.Value then
                        local tween = TweenService:Create(ToggleSlider, TweenInfo.new(.2),
                            { Position = UDim2.new(0.5, 0, 0, 0) });
                        tween:Play();

                        Library:Register(ToggleBackground, { BackgroundColor3 = "Accent2" });
                    else
                        local tween = TweenService:Create(ToggleSlider, TweenInfo.new(.2),
                            { Position = UDim2.new(0, 0, 0, 0) });
                        tween:Play();

                        Library:Register(ToggleBackground, { BackgroundColor3 = "Background2" });
                    end
                end;

                function Toggle:SetValue(Value)
                    Toggle.Value = Value or false;

                    Update();
                    SaveFlag();

                    task.spawn(function()
                        Callback(Toggle.Value);
                    end);
                end;

                function Toggle:Fire()
                    Toggle:SetValue(not Toggle.Value);
                end;

                function Toggle:Load()
                    Toggle:SetValue(Library.Flags[Flag] or Toggle.Default);
                end;

                function Toggle:SetText(nText)
                    Text = nText or "";
                    Update();
                end;

                function Toggle:Destroy()
                    Toggle:SetValue(false);

                    task.wait();

                    Toggle = nil;
                    Library.Toggles[Idx] = nil;
                end;

                ToggleClick.MouseButton1Click:Connect(Toggle.Fire);

                return Toggle;
            end;

            function Section:CreateSlider(Settings)
                local Settings = Settings or {};
                local Slider = {
                    Default = Settings.Default or 50,
                    Value = Settings.Default or 50,
                    Max = Settings.Max or 100,
                    Min = Settings.Min or 0
                };

                local Snap = Settings.Snap or .01;
                local Flag = Settings.Flag or nil;
                local Text = Settings.Text or "Slider";
                local LayoutOrder = Settings.LayoutOrder or 0;

                if Flag then
                    Library.FlagInstances[Flag] = Slider;
                end;

                local SliderFrame = Library:Create("Frame", {
                    Parent = SectionFrame,
                    BackgroundColor3 = Color3.new(0, 0, 0),
                    BackgroundTransparency = 1,
                    BorderColor3 = Color3.new(0, 0, 0),
                    BorderSizePixel = 0,
                    Position = UDim2.new(-6.62688535e-08, 0, 0, 0),
                    Size = UDim2.new(1, 0, 0, 40),
                    ZIndex = 105,
                    LayoutOrder = LayoutOrder
                });

                local SliderLabel = Library:CreateLabel({
                    Parent = SliderFrame,
                    BackgroundTransparency = 1,
                    BorderColor3 = Color3.new(0, 0, 0),
                    BorderSizePixel = 0,
                    Position = UDim2.new(0, 5, 0, 0),
                    Size = UDim2.new(0.600000024, 0, 0.5, 0),
                    ZIndex = 106,
                    Font = Library.Font,
                    Text = Text,
                    TextScaled = true,
                    TextSize = 14,
                    TextWrapped = true,
                    TextXAlignment = Enum.TextXAlignment.Left,
                });

                local SliderHolder = Library:Create("Frame", {
                    Parent = SliderFrame,
                    AnchorPoint = Vector2.new(0, 1),
                    BackgroundColor3 = Color3.new(1, 1, 1),
                    BackgroundTransparency = 1,
                    BorderColor3 = Color3.new(0, 0, 0),
                    BorderSizePixel = 0,
                    Position = UDim2.new(0, 0, 1, 5),
                    Size = UDim2.new(1, 0, 0.5, 0),
                    ZIndex = 106,
                });

                local SliderOutside = Library:Create("Frame", {
                    Parent = SliderHolder,
                    AnchorPoint = Vector2.new(0.5, 0.5),
                    BackgroundColor3 = Color3.new(0.0784314, 0.0784314, 0.0784314),
                    BackgroundTransparency = 0.20000000298023224,
                    BorderColor3 = Color3.new(0, 0, 0),
                    BorderSizePixel = 0,
                    Position = UDim2.new(0.5, 0, 0.5, 0),
                    Size = UDim2.new(1, 0, 0.5, 0),
                    ZIndex = 106,
                });

                local SliderInside = Library:Create("Frame", {
                    Parent = SliderOutside,
                    AnchorPoint = Vector2.new(0, 0.5),
                    BackgroundColor3 = Color3.new(0.513726, 0.513726, 0.666667),
                    BorderColor3 = Color3.new(0, 0, 0),
                    BorderSizePixel = 0,
                    Position = UDim2.new(0, 0, 0.5, 0),
                    Size = UDim2.new(0.100000001, 0, 1, 0),
                    ZIndex = 106,
                });

                local SliderTextBox = Library:Create("TextBox", {
                    Parent = SliderFrame,
                    AnchorPoint = Vector2.new(1, 0),
                    BackgroundColor3 = Color3.new(0.0784314, 0.0784314, 0.0784314),
                    BorderColor3 = Color3.new(0, 0, 0),
                    BorderSizePixel = 0,
                    Position = UDim2.new(1, 0, 0.0500000007, 0),
                    Size = UDim2.new(0.150000006, 0, 0.400000006, 0),
                    ZIndex = 111,
                    Font = Library.Font,
                    Text = Slider.Value or "0",
                    TextColor3 = Color3.new(0.705882, 0.705882, 0.705882),
                    TextSize = 14,
                });

                Library.ApplyUIPadding(SliderFrame);
                Library:Create("UITextSizeConstraint", { Parent = SliderLabel, MaxTextSize = 16, });
                Library:Create("UICorner", { Parent = SliderOutside, CornerRadius = UDim.new(1, 0) });
                Library:Create("UICorner", { Parent = SliderInside, CornerRadius = UDim.new(1, 0) });
                Library:Create("UICorner", { Parent = SliderTextBox, CornerRadius = UDim.new(1, 0) });
                Library:Create("UISizeConstraint", { Parent = SliderTextBox, MaxSize = Vector2.new(50, math.huge) });
                Library:Register(Library.ApplyUIStroke(SliderOutside, "Round"), { Color = "Accent1" });
                Library:Register(SliderTextBox, { TextColor3 = "TextColor" });
                Library:Register(SliderLabel, { TextColor3 = "TextColor" });
                Library.ApplyUIStroke(SliderTextBox);
                Library.ApplyUIStroke(SliderInside, "Round")
                Library:Register(SliderFrame, { BackgroundColor3 = "Background2" });

                local SliderClick = Library:Create("TextButton", {
                    Parent = SliderFrame,
                    BackgroundTransparency = 1,
                    Text = "",
                    Size = UDim2.new(1, 0, 1, 0),
                    ZIndex = 110,
                });

                local Callback = Settings.Callback or function(...) end;

                local function SaveFlag()
                    if Flag then
                        Library.Flags[Flag] = Slider.Value;
                    end;

                    Library:Save();
                end;

                local function Update()
                    local percent = math.clamp((Slider.Value - Slider.Min) / (Slider.Max - Slider.Min), 0, 1);
                    SliderTextBox.Text = math.floor(Slider.Value);
                    TweenService:Create(SliderInside, TweenInfo.new(.05), { Size = UDim2.new(percent, 0, 1, 0) }):Play();

                    if percent <= 0 then
                        SliderInside.Visible = false;
                    else
                        SliderInside.Visible = true;
                    end
                end;

                function Slider:SetValue(Value)
                    if typeof(Value) ~= "number" then return; end;

                    Slider.Value = math.clamp(Value, Slider.Min, Slider.Max) or 0;

                    Update();
                    SaveFlag();

                    task.spawn(function()
                        Callback(Slider.Value);
                    end);
                end;

                function Slider:Load()
                    print(Library.Flags[Flag]);
                    Slider:SetValue(Library.Flags[Flag] or Slider.Default);
                end;

                function Slider:SetMax(Value)
                    Slider.Max = Value or 0;
                    Update();
                end;

                function Slider:SetMin(Value)
                    Slider.Min = Value or 0;
                    Update();
                end;

                function Slider:SetText(nText)
                    Text = nText or "";
                    Update();
                end;

                Update();

                SliderClick.MouseButton1Down:Connect(function()
                    while UserInputService:IsMouseButtonPressed(Enum.UserInputType.MouseButton1) do
                        local MousePos = UserInputService:GetMouseLocation().X;
                        local FramePos = SliderOutside.AbsolutePosition.X;
                        local FrameSize = SliderOutside.AbsoluteSize.X;
                        local percent = math.clamp((((MousePos - FramePos) / Snap + .5) * Snap) / FrameSize, 0, 1);
                        local min, max = Slider.Min or 0, Slider.Max or 100;

                        Slider:SetValue(math.clamp(((max - min) * percent) + min, min, max));

                        RunService.Heartbeat:Wait();
                    end;
                end);

                SliderTextBox.FocusLost:Connect(function()
                    if tonumber(SliderTextBox.Text) then
                        Slider:SetValue(tonumber(SliderTextBox.Text));
                    end;
                end);

                return Slider;
            end;

            function Section:CreateInputBox(Settings)
                local Input, Settings = {}, Settings or {};
                local Text = Settings.Text or "InputBox";
                local LayoutOrder = Settings.LayoutOrder or 0;

                local Callback = Settings.Callback or function(...) end;
                local CharLimit = Settings.CharLimit or 9999999;
                local Flag = Settings.Flag or nil;
                local DefaultText = Settings.Prompt or "Input Here..."

                if Flag then
                    Library.FlagInstances[Flag] = Input;
                end;

                local InputFrame = Library:Create("Frame",
                    { Parent = SectionFrame, Size = UDim2.new(1, 0, 0, 25), LayoutOrder = LayoutOrder });

                local InputLabel = Library:CreateLabel({
                    Parent = InputFrame,
                    BackgroundTransparency = 1,
                    BorderSizePixel = 0,
                    Position = UDim2.new(0, 5, 0, 0),
                    Size = UDim2.new(0.6, 0, 1, 0),
                    ZIndex = 106,
                    Font = Library.Font,
                    Text = Text,
                    TextScaled = true,
                    TextSize = 14,
                    TextWrapped = true,
                    TextXAlignment = Enum.TextXAlignment.Left,
                });

                local InputBox = Library:Create("TextBox", {
                    Parent = InputFrame,
                    AnchorPoint = Vector2.new(1, 0),
                    BackgroundTransparency = 1,
                    BorderSizePixel = 0,
                    Position = UDim2.new(1, 0, 0, 0),
                    Size = UDim2.new(.25, 0, 1, 0),
                    ZIndex = 110,
                    Font = Library.Font,
                    Text = DefaultText or "Input Here...",
                    TextColor3 = Color3.new(0.705882, 0.705882, 0.705882),
                    TextSize = 14,
                    TextXAlignment = Enum.TextXAlignment.Left,
                    ClipsDescendants = true
                });

                Library.ApplyUIPadding(InputFrame);
                Library.ApplyUIStroke(InputBox);
                Library.ApplyUIStroke(InputLabel);
                Library:Register(InputBox, { TextColor3 = "TextColor" });
                Library:Register(InputLabel, { TextColor3 = "TextColor" });

                local function SaveFlag()
                    if Flag then
                        Library.Flags[Flag] = InputBox.Text;
                    end;

                    Library:Save();
                end;

                function Input:SetInput(Value)
                    InputBox.Text = string.sub(tostring(Value), 1, CharLimit) or "";

                    if InputBox.Text == "" then
                        InputBox.Text = "Input Here..."
                        InputBox.TextTransparency = .6;
                    else
                        InputBox.TextTransparency = 0;
                    end;

                    SaveFlag();

                    task.spawn(function()
                        Callback(string.sub(InputBox.Text, 1, CharLimit));
                    end);
                end;

                InputBox.FocusLost:Connect(function()
                    Input:SetInput(InputBox.Text);
                end);


                function Input:Load()
                    Input:SetInput(Library.Flags[Flag] or Text);
                end;

                return Input;
            end;

            function Section:CreateKeybind(Settings)
                local Settings = Settings or {};
                local Keybind = { Value = Settings.Default or nil, Default = Settings.Default or nil };
                local Text = Settings.Text or "Keybind";
                local LayoutOrder = Settings.LayoutOrder or 0;

                local Callback = Settings.Callback or function(...) end;
                local validKeys = Settings.Valid or nil;
                local Flag = Settings.Flag;

                if Flag then
                    Library.FlagInstances[Flag] = Keybind;
                end;

                local KeybindFrame = Library:Create("Frame", {
                    Parent = SectionFrame,
                    BackgroundColor3 = Color3.new(0, 0, 0),
                    BackgroundTransparency = 1,
                    BorderColor3 = Color3.new(0, 0, 0),
                    BorderSizePixel = 0,
                    Position = UDim2.new(-6.62688535e-08, 0, 0, 0),
                    Size = UDim2.new(1.00000012, 0, 0, 25),
                    ZIndex = 105,
                    LayoutOrder = LayoutOrder
                });

                local KeybindLabel = Library:CreateLabel({
                    Parent = KeybindFrame,
                    BackgroundTransparency = 1,
                    BorderColor3 = Color3.new(0, 0, 0),
                    BorderSizePixel = 0,
                    Position = UDim2.new(0, 5, 0, 0),
                    Size = UDim2.new(0.600000024, 0, 1, 0),
                    ZIndex = 106,
                    Font = Library.Font,
                    Text = Text,
                    TextScaled = true,
                    TextSize = 14,
                    TextWrapped = true,
                    TextXAlignment = Enum.TextXAlignment.Left,
                });


                local KeybindHolder = Library:Create("Frame", {
                    Parent = KeybindFrame,
                    AnchorPoint = Vector2.new(1, 0.5),
                    BackgroundColor3 = Color3.new(0.0784314, 0.0784314, 0.0784314),
                    BackgroundTransparency = 0.20000000298023224,
                    BorderColor3 = Color3.new(0, 0, 0),
                    BorderSizePixel = 0,
                    Position = UDim2.new(1, 0, 0.5, 0),
                    Size = UDim2.new(0.150000006, 0, 1, 0),
                    ZIndex = 106,
                });

                local KeybindKey = Library:Create("TextLabel", {
                    Parent = KeybindHolder,
                    BackgroundTransparency = 1,
                    BorderSizePixel = 0,
                    AnchorPoint = Vector2.new(.5, .5),
                    Position = UDim2.new(.5, 0, .5, 0),
                    Size = UDim2.new(.8, 0, .98, 0),
                    ZIndex = 106,
                    Font = Library.Font,
                    Text = tostring(Keybind.Value),
                    TextColor3 = Color3.new(1, 1, 1),
                    TextScaled = true,
                    TextSize = 14,
                    TextWrapped = true,
                });

                local KeybindClick = Library:Create("ImageButton", {
                    Parent = KeybindHolder,
                    Active = false,
                    AnchorPoint = Vector2.new(0.5, 0.5),
                    BackgroundColor3 = Color3.new(0.0784314, 0.0784314, 0.0784314),
                    BackgroundTransparency = 1,
                    BorderColor3 = Color3.new(0, 0, 0),
                    BorderSizePixel = 0,
                    Position = UDim2.new(0.5, 0, 0.5, 0),
                    Selectable = false,
                    Size = UDim2.new(2, 0, 2, 0),
                    ZIndex = 107,
                });

                Library.ApplyUIPadding(KeybindFrame);
                Library:Create("UIAspectRatioConstraint", { Parent = KeybindHolder, AspectRatio = 3 });
                Library:Create("UISizeConstraint", { Parent = KeybindHolder, MaxSize = Vector2.new('inf', 22), });
                Library:Create("UICorner", { Parent = KeybindHolder, });
                Library:Create("UICorner", { Parent = KeybindHolder, });
                Library:Create("UIAspectRatioConstraint", { Parent = KeybindHolder, });
                Library:Create("UITextSizeConstraint", { Parent = KeybindLabel, MaxTextSize = 16, });
                Library:Create("UITextSizeConstraint", { Parent = KeybindKey, MaxTextSize = 14, });
                Library:Register(Library.ApplyUIStroke(KeybindHolder, "Round"), { Color = "Accent2" });
                Library:Register(KeybindKey, { TextColor3 = "TextColor" });
                Library:Register(KeybindLabel, { TextColor3 = "TextColor" });

                local recorder;
                local function SetupRecorder()
                    if recorder then
                        recorder:Disconnect();
                        recorder = nil;
                    end;

                    local key = Keybind.Value;

                    KeybindKey.Text = tostring(key);

                    if key and Enum.KeyCode[key] then
                        recorder = Library.RecordPress("KeyCode", { key }, Callback);
                    end;
                end;

                local function SaveFlag()
                    if Flag then
                        Library.Flags[Flag] = tostring(Keybind.Value);
                    end;

                    Library:Save();
                end;

                function Keybind:SetKey(key)
                    Keybind.Value = key;

                    SetupRecorder();
                    SaveFlag();
                end;

                function Keybind:Load()
                    Keybind:SetKey(Library.Flags[Flag] or Keybind.Default);
                end;

                KeybindClick.MouseButton1Click:Connect(function()
                    local recieved = Library.RecordPress("KeyCode", validKeys, function(Key)
                        Keybind:SetKey(Key);
                    end, true);

                    KeybindKey.Text = "..."
                end);

                SetupRecorder();

                return Keybind;
            end;

            function Section:CreateDropdown(Settings)
                local Dropdown, Settings = {}, Settings or {};
                local Text = Settings.Text or "Dropdown";
                local LayoutOrder = Settings.LayoutOrder or 0;

                local Options = {
                    ['Instances'] = {},
                    ['Options'] = Settings.Options or {},
                }

                local Callback = Settings.Callback or function(...) end;
                local Multi = Settings.Multi or false;
                local Default = Settings.Default or nil;
                local Current = Default or nil;
                local Flag = Settings.Flag;

                if Flag then
                    Library.FlagInstances[Flag] = Dropdown;
                end;

                if not Multi then
                    if typeof(Default) == "table" then
                        Default = unpack(Default);
                    end;
                else
                    if typeof(Default) ~= "table" then
                        Default = { Default };
                    end;
                end;

                local DropdownFrameHolder = Library:Create("Frame", {
                    Parent = SectionFrame,
                    BackgroundTransparency = 0,
                    BorderSizePixel = 0,
                    Position = UDim2.new(0, 0, 0, 0),
                    Size = UDim2.new(1, 0, 0, 40),
                });

                local DropdownFrame = Library:Create("Frame", {
                    Parent = DropdownFrameHolder,
                    BackgroundColor3 = Color3.new(0, 0, 0),
                    BackgroundTransparency = 1,
                    BorderColor3 = Color3.new(0, 0, 0),
                    BorderSizePixel = 0,
                    Position = UDim2.new(0, 0, 0, 0),
                    Size = UDim2.new(1, 0, 0, 40),
                    ZIndex = 105,
                });

                local DropdownLabel = Library:CreateLabel({
                    Parent = DropdownFrame,
                    BackgroundColor3 = Color3.new(1, 1, 1),
                    BackgroundTransparency = 1,
                    BorderColor3 = Color3.new(0, 0, 0),
                    BorderSizePixel = 0,
                    Position = UDim2.new(0, 5, 0, 0),
                    Size = UDim2.new(0.600000024, 0, 0.5, 0),
                    ZIndex = 106,
                    Font = Library.Font,
                    Text = Text,
                    TextColor3 = Color3.new(0.705882, 0.705882, 0.705882),
                    TextScaled = true,
                    TextSize = 14,
                    TextWrapped = true,
                    TextXAlignment = Enum.TextXAlignment.Left,
                });

                local DropdownHolder = Library:Create("Frame", {
                    Parent = DropdownFrame,
                    AnchorPoint = Vector2.new(0, 1),
                    BackgroundColor3 = Color3.new(0.0196078, 0.0196078, 0.0196078),
                    BorderColor3 = Color3.new(0, 0, 0),
                    BorderSizePixel = 0,
                    Position = UDim2.new(0, 0, 1, 0),
                    Size = UDim2.new(1, 0, 0.449999988, 0),
                    ZIndex = 106,
                });

                local ExtenderIcon = Library:CreateLabel({
                    Parent = DropdownHolder,
                    AnchorPoint = Vector2.new(1, .5),
                    BackgroundColor3 = Color3.new(1, 1, 1),
                    BackgroundTransparency = 1,
                    BorderColor3 = Color3.new(0, 0, 0),
                    BorderSizePixel = 0,
                    Position = UDim2.new(.998, 0, .488, 0),
                    Size = UDim2.new(0.1, 0, 1, 0),
                    ZIndex = 106,
                    Font = Enum.Font.SourceSansBold,
                    Text = "↓",
                    TextColor3 = Color3.new(0.705882, 0.705882, 0.705882),
                    TextSize = 14,
                });

                local OptionSelected = Library:CreateLabel({
                    Parent = DropdownHolder,
                    BackgroundColor3 = Color3.new(1, 1, 1),
                    BackgroundTransparency = 1,
                    BorderColor3 = Color3.new(0, 0, 0),
                    BorderSizePixel = 0,
                    Position = UDim2.new(0, 7, 0, 0),
                    Size = UDim2.new(0.5, 0, 1, 0),
                    ZIndex = 106,
                    Font = Enum.Font.SourceSansBold,
                    TextColor3 = Color3.new(0.705882, 0.705882, 0.705882),
                    TextSize = 14,
                    TextXAlignment = Enum.TextXAlignment.Left,
                });

                local DropdownClick = Library:Create("TextButton", {
                    Parent = DropdownFrame,
                    BackgroundTransparency = 1,
                    Text = "",
                    Size = UDim2.new(1, 0, 1, 0),
                    ZIndex = 110,
                });

                local DropOptions = Library:Create("ScrollingFrame", {
                    Parent = DropdownFrame,
                    Size = UDim2.new(1, 0, 0, 80),
                    Position = UDim2.new(0, 0, 1, 5),
                    Visible = false,
                    ZIndex = 106,
                    BackgroundTransparency = .4,
                    ScrollBarThickness = 1,
                });

                Library:Create("UIListLayout", {
                    Parent = DropOptions,
                    HorizontalAlignment = Enum.HorizontalAlignment.Center,
                    SortOrder = Enum.SortOrder.LayoutOrder,
                    Padding = UDim.new(0, 5),
                });
                Library.ApplyUIPadding(DropdownFrame);
                Library:Create("UITextSizeConstraint", { Parent = DropdownLabel, MaxTextSize = 16, });
                Library:Create("UIAspectRatioConstraint", {
                    Parent = ExtenderIcon,
                    AspectType = Enum.AspectType.ScaleWithParentSize,
                    DominantAxis = Enum.DominantAxis.Height,
                });
                Library:Register(ExtenderIcon, { TextColor3 = "IconColor" });
                Library:Register(OptionSelected, { TextColor3 = "TextColor" });
                Library:Register(DropOptions, { BackgroundColor3 = "Background2" });
                Library.ApplyUIStroke(DropOptions);
                Library.ApplyUIStroke(DropdownHolder);
                AutoSize(DropOptions, 5);

                local Update;

                function Dropdown:AddItem(Item)
                    if Options['Instances'][Item] then return; end;
                    table.insert(Options['Options'], Item);

                    local ButtonFrame = Library:Create("Frame", {
                        Parent = DropOptions,
                        BackgroundColor3 = Color3.new(0, 0, 0),
                        BackgroundTransparency = 1,
                        BorderColor3 = Color3.new(0, 0, 0),
                        BorderSizePixel = 0,
                        Position = UDim2.new(-6.62688535e-08, 0, 0, 0),
                        Size = UDim2.new(1, 0, 0, 25),
                        ZIndex = 105,
                    });

                    local TextLabel = Library:CreateLabel({
                        Parent = ButtonFrame,
                        BackgroundTransparency = 1,
                        BorderColor3 = Color3.new(0, 0, 0),
                        BorderSizePixel = 0,
                        Position = UDim2.new(0, 5, 0, 0),
                        Size = UDim2.new(1, 0, 1, 0),
                        ZIndex = 106,
                        Font = Library.Font,
                        Text = Item,
                        TextColor3 = Color3.new(0.705882, 0.705882, 0.705882),
                        TextScaled = true,
                        TextSize = 14,
                        TextWrapped = true,
                    });

                    local UITextSizeConstraint = Library:Create("UITextSizeConstraint", {
                        Parent = TextLabel,
                        MaxTextSize = 16,
                    });

                    local ButtonClick = Library:Create("TextButton", {
                        Parent = ButtonFrame,
                        BackgroundTransparency = 1,
                        Text = "",
                        Size = UDim2.new(1, 0, 1, 0),
                        ZIndex = 110,
                    });

                    Options['Instances'][Item] = ButtonFrame;
                    Library:Register(ButtonClick, { TextColor3 = "TextColor" });
                    Library:Register(TextLabel, { TextColor3 = "TextColor" });

                    ButtonClick.MouseButton1Click:Connect(function()
                        if Multi then
                            if typeof(Current) ~= "table" then Current = {} end;
                            if not table.find(Current, Item) then
                                table.insert(Current, Item);
                            else
                                table.remove(Current, table.find(Current, Item))
                            end
                        else
                            Current = Item;
                        end

                        Update();
                    end);
                end;

                Update = function()
                    for i, v in next, (Options['Instances']) do
                        if not table.find(Options['Options'], v) then
                            Options['Instances'][i]:Destroy();
                            Options['Instances'][i] = nil;
                        end;
                    end;

                    for i, v in next, (Options['Options']) do
                        Dropdown:AddItem(v);
                    end;

                    local currentText = "nil";
                    if typeof(Current) == 'table' then
                        for i, v in next, (Current) do
                            if i == 1 then
                                currentText = v;
                            else
                                currentText = currentText .. ", " .. v;
                            end
                        end
                    else
                        currentText = tostring(Current);
                    end

                    OptionSelected.Text = tostring(currentText);

                    if Flag then
                        Library.Flags[Flag] = Current;
                    end;

                    Library:Save();

                    task.spawn(function()
                        Callback(Current);
                    end);
                end;

                function Dropdown:SetOptions(newOptions)
                    local newOptions = newOptions or {};

                    Options['Options'] = newOptions;
                    Update();
                end;

                function Dropdown:SetValue(val)
                    if val then
                        if Multi then
                            if typeof(val) == 'table' then
                                Current = val;
                            else
                                Current = { val };
                            end;
                        else
                            if typeof(val) == 'table' then
                                warn(Flag .. " ISN'T MULTI")
                                val = unpack(val);
                            end;

                            Current = val;
                        end;
                        Update();
                    end;
                end;

                function Dropdown:Load()
                    Dropdown:SetValue(Library.Flags[Flag] or Default);
                end;

                Update();

                local isExtended = false;

                DropdownClick.MouseButton1Click:Connect(function()
                    isExtended = not isExtended;

                    if isExtended then
                        Update();
                        DropOptions.Visible = true;
                        DropdownFrameHolder.Size = UDim2.new(1, 0, 0, 125);
                        ExtenderIcon.Text = "↑";
                    else
                        DropOptions.Visible = false;
                        DropdownFrameHolder.Size = UDim2.new(1, 0, 0, 40);
                        ExtenderIcon.Text = "↓";
                    end;
                end);

                return Dropdown;
            end;

            return Section;
        end;

        return Tab;
    end;

    return Window;
end;

return Library;
