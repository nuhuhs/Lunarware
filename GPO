-- GPO Impel DOWN
local Library = loadstring(game:HttpGet('https://raw.githubusercontent.com/nuhuhs/LunarUI/main/Main'))();

do -- Anti Error
    pcall(function()
        for _, v in pairs(getconnections(game:GetService("ScriptContext").Error)) do
            v:Disable()
            print('Anti Error Executed')
        end
    end)
end


local Checkpoints = {
    [1] = { CFrame = CFrame.new(2951.60474, 2075.44531, -13833), Wait = 1 },
    [2] = { CFrame = CFrame.new(2665.24463, 2075.44531, -15513.6182) },
    [3] = { CFrame = CFrame.new(3202.46802, 2380.43066, -20271.2207), },
    [4] = { CFrame = CFrame.new(3200.94775, 2383.9856, -20400.8848), },
    [5] = { CFrame = CFrame.new(2976.66333, 2378.43066, -20400.7031), },
    [6] = { CFrame = CFrame.new(2920.98584, 2378.43066, -20417.3301), },
    [7] = { CFrame = CFrame.new(2920.98584, 2378.43066, -20616.1426), },
    [8] = { CFrame = CFrame.new(3001.22974, 2343.38062, -20558.2598), },
    [9] = { CFrame = CFrame.new(3198.78809, 2343.38062, -20556.9082), },
    [10] = { CFrame = CFrame.new(3198.6582, 2344.66333, -20532.4355) },
    [11] = { CFrame = CFrame.new(3200.94775, 2383.9856, -20400.8848), },
    [12] = { CFrame = CFrame.new(3202.66797, 2378.38062, -20578.4121), },
    [13] = { CFrame = CFrame.new(3197.11084, 2376.68872, -20814.7441), },
    [14] = { CFrame = CFrame.new(3196.58057, 2378.38062, -21086.5117), Wait = 5 },
    [15] = { CFrame = CFrame.new(4980.68604, 2306.33008, -20739.457), },
    [16] = { CFrame = CFrame.new(4821.146, 2306.37988, -20736.3789), Wait = 2 },
    [17] = { CFrame = CFrame.new(4702.44971, 2307.229, -20719.7305), },
    [18] = { CFrame = CFrame.new(5102.46289, 2306.33008, -20788.9121), Wait = 2 },
    [19] = { CFrame = CFrame.new(5162.89648, 2308.34766, -20795.459), },
    [20] = { CFrame = CFrame.new(4828.36572, 2368.33008, -20998.4375), },
    [21] = { CFrame = CFrame.new(4775.06152, 2398.83032, -20787.2207), },
    [22] = { CFrame = CFrame.new(5204.69238, 2398.12988, -20795.0059), },
    [23] = { CFrame = CFrame.new(5522.45166, 2405.83008, -20832.2324), },
    [24] = { CFrame = CFrame.new(5577.01318, 2499.83008, -20951.4941), },
    [25] = { CFrame = CFrame.new(5666.6748, 2482.93872, -20505.166), },
    [26] = { CFrame = CFrame.new(5666.67871, 2489.33032, -20256.0586), Wait = 5 },
    [27] = { CFrame = CFrame.new(10022.1045, 1615.79456, -19234.7324), },
    [28] = { CFrame = CFrame.new(10003.9434, 1628.55359, -19571.0078), },
    [29] = { CFrame = CFrame.new(9726.88477, 1629.55261, -19740.1992), },
    [30] = { CFrame = CFrame.new(9664.2002, 1629.64185, -20240.2988), },
    [31] = { CFrame = CFrame.new(10065.1494, 1628.55359, -20251.4531), },
    [32] = { CFrame = CFrame.new(10523.6084, 1628.55359, -20344.9531), },
    [33] = { CFrame = CFrame.new(10938.5723, 1628.55359, -20383.9707), },
    [34] = { CFrame = CFrame.new(10925.7773, 1628.55359, -20929.2012), },
    [35] = { CFrame = CFrame.new(10637.6943, 1628.55359, -20982.6172), },
    [36] = { CFrame = CFrame.new(10045.7285, 1628.55359, -20981.7539), },
    [37] = { CFrame = CFrame.new(9988.00586, 1644.55347, -21866.0176), },
    [38] = { CFrame = CFrame.new(9975.45703, 1657.55347, -22136.6602), Wait = 5 },
    [39] = { CFrame = CFrame.new(9408.20801, 572.872681, -27945.3262), },
    [40] = { CFrame = CFrame.new(9414.35938, 572.720032, -27389.3867), },
    [41] = { CFrame = CFrame.new(10147.7295, 573.194702, -27359.1562), },
    [42] = { CFrame = CFrame.new(10602.6084, 542.719849, -27380.666), },
    [43] = { CFrame = CFrame.new(10601.6514, 490.720154, -28368.2207), },
    [44] = { CFrame = CFrame.new(10244.5059, 460.71994, -28452.0156), },
    [45] = { CFrame = CFrame.new(9688.59473, 512.720032, -28453.4102), },
    [46] = { CFrame = CFrame.new(9636.98633, 568.719849, -27908.3984), Wait = 3 },
    [47] = { CFrame = CFrame.new(6395.42773, 653.777893, -27928.0078) }
}

local Storage = {
    ['TweenSpeed'] = 10,
    ['No Fall'] = nil,
    ['CurrentTween'] = nil,
};

local TweenService = game:GetService("TweenService");
local RunService = game:GetService("RunService");

local client = game:GetService("Players").LocalPlayer;
local char = client.Character or client.CharacterAdded;
local hum = char:WaitForChild("Humanoid");
local hrp = char:WaitForChild("HumanoidRootPart");
local VirtualInputManager = game:GetService("VirtualInputManager")
local camera = workspace.CurrentCamera;

function clickMB(mb)
    pcall(function()
        local mb = mb or 1;
        VirtualInputManager:SendMouseButtonEvent(0, 0, mb, true, game);
        wait()
        VirtualInputManager:SendMouseButtonEvent(0, 0, mb, false, game);
    end)
end

function pressKey(key)
    pcall(function()
        VirtualInputManager:SendKeyEvent(true, Enum.KeyCode[key], false, game)
        wait()
        VirtualInputManager:SendKeyEvent(false, Enum.KeyCode[key], false, game)
    end)
end

function holdKey(key)
    pcall(function()
        VirtualInputManager:SendKeyEvent(true, Enum.KeyCode[key], false, game)
    end)
end

function releaseKey(key)
    pcall(function()
        VirtualInputManager:SendKeyEvent(false, Enum.KeyCode[key], false, game)
    end)
end

local function UpdateCharacter()
    char = client.Character;
    hum = char:WaitForChild("Humanoid");
    hrp = char:WaitForChild("HumanoidRootPart");
end;

client.CharacterAdded:Connect(UpdateCharacter);

local function GetSpeed()
    if char then
        return char:GetAttribute("SpeedBypass") + 49;
    else
        return 49;
    end;
end;

local BypassDB = {};

local function TweenTo(pos, speed)
    if Storage['No Fall'] then
        Storage['No Fall']:Destroy();
        Storage['No Fall'] = nil;
    end;

    if not pos then
        if Storage['CurrentTween'] then Storage['CurrentTween']:Pause(); end; return;
    end;
    local speed = speed or Storage['TweenSpeed'] or 25;
    local vec3, cframe = pos.Position, CFrame.new(pos.X, hrp.CFrame.Y, pos.Z);

    -- No Fall

    local isClose = false;

    Storage['No Fall'] = Instance.new('BodyVelocity');
    Storage['No Fall'].MaxForce = Vector3.new(math.huge, math.huge, math.huge);
    Storage['No Fall'].Velocity = Vector3.new(0, 0, 0);
    Storage['No Fall'].Parent = hrp;

    if (hrp.Position - cframe.Position).Magnitude <= ((speed / 2)) then
        hrp.CFrame = pos;
        cframe = pos;
        isClose = true;

        if typeof(CurrentBypasses) == 'table' then
            for i, v in next, (CurrentBypasses) do
                if v == 'Geppo' then
                    if not BypassDB[v] then
                        game:GetService("ReplicatedStorage").Events.Skill:InvokeServer('Sky Walk2', {});
                        BypassDB[v] = true;
                        spawn(function()
                            task.wait(2)
                            BypassDB[v] = false;
                        end);
                    end;
                end;
            end;
        end;
    else
        if typeof(CurrentBypasses) == 'table' then
            for i, v in next, (CurrentBypasses) do
                if v == 'Geppo' then
                    if not BypassDB[v] then
                        game:GetService("ReplicatedStorage").Events.Skill:InvokeServer('Sky Walk2', {});
                        BypassDB[v] = true;
                        spawn(function()
                            task.wait(.5)
                            BypassDB[v] = false;
                        end);
                    end;
                elseif v == 'Dash' then
                    if not BypassDB[v] then
                        game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("takestam")
                            :FireServer(
                                .78, "dash");
                        BypassDB[v] = true;
                        spawn(function()
                            task.wait(.5)
                            BypassDB[v] = false;
                        end);
                    end;
                elseif v == "Pika" then
                    game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("Skill"):InvokeServer(
                        "Light Flight");
                elseif v == "Gomu" then
                    game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("Skill"):InvokeServer(
                        "Gomu-Gomu no Balloon", {});
                    game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("Skill"):InvokeServer(
                        "Gomu-Gomu no Rocket", { ['cf'] = hrp.CFrame, ['charCF'] = hrp.CFrame });

                    if game:GetService("ReplicatedStorage").PlayerRemotes:FindFirstChild(client.Name .. "|ServerScriptService.Skills.Skills.SkillContainer.Gomu-Gomu.Gomu-Gomu no Rocket") then
                        game:GetService("ReplicatedStorage").PlayerRemotes:FindFirstChild(client.Name ..
                            "|ServerScriptService.Skills.Skills.SkillContainer.Gomu-Gomu.Gomu-Gomu no Rocket")
                            :FireServer(hrp.CFrame);
                    end;
                end;
            end;
        end;
    end;

    if char and hrp then
        local Time = (hrp.Position - (vec3)).magnitude / speed;
        Storage['CurrentTween'] = TweenService:Create(hrp,
            TweenInfo.new(Time, Enum.EasingStyle.Linear), { CFrame = cframe });
        Storage['CurrentTween']:Play();
    end;

    return isClose;
end;

local function NearestMob()
    local largest = math.huge
    local closestChild = nil
    for i, v in pairs(workspace:WaitForChild("NPCs"):GetChildren()) do
        if v:IsA("Model") and not v:FindFirstChild("ForceField") and v:FindFirstChild("Humanoid") and v:FindFirstChild("Humanoid").Health > 0 and v:FindFirstChild("HumanoidRootPart") then
            local magnitude = (hrp.Position - v:GetBoundingBox().Position).magnitude
            if magnitude < largest then
                closestChild = v
                largest = magnitude
            end;
        end;
    end;
    return closestChild
end;

local Lunar = Library:CreateWindow("Lunar // GPO");
local Main = Lunar:CreateTab("Main");
local Settings = Lunar:CreateTab("Settings");
local Section = Main:CreateSection("Main");
local SettingSection = Settings:CreateSection("Settings");

SettingSection:CreateKeybind({ Text = "Hide UI", Default = "End", Callback = function() Library.Visible(); end, });
SettingSection:CreateButton({ Text = "Unload", Callback = function() Library:Unload(); end });

local ImpelCheckpoint = 0;

local AutoImpel = Section:CreateToggle({
    Text = "Auto Impel",
    Default = false,
    Flag = "AutoImpel_Flag",

    Callback = function(Value)
        getgenv().AutoImpel = Value;

        local db;
        local lastMob = tick();

        if Storage['impelIsland'] then
            Storage['impelIsland']:Disconnect();
            Storage['impelIsland'] = nil;
        end;

        Storage['impelIsland'] = workspace:FindFirstChild("Islands").ChildAdded:Connect(function()
            db = true;
            task.wait(2.5);
            db = false;
            Checkpoints[ImpelCheckpoint - 1].Wait = 0;

            if not startTick then
                getgenv().startTick = tick();
            end;
        end);

        local kelvin;

        while AutoImpel do
            if not db then
                local Nearest = NearestMob();

                camera.CFrame = CFrame.new(camera.CFrame.Position) * CFrame.Angles(math.rad(-90), 0, 0);
                clickMB(1);

                if ImpelCheckpoint == 0 then
                    if workspace:FindFirstChild("Effects") then
                        if workspace:FindFirstChild("Effects"):FindFirstChild("Key") and workspace:FindFirstChild("Effects"):FindFirstChild("Key"):FindFirstChild("Key") then
                            print("KEY");
                            getgenv().keyFound = true;
                            local vec3 = workspace:FindFirstChild("Effects"):FindFirstChild("Key"):FindFirstChild(
                                "Key").CFrame.Position;

                            local isDone = TweenTo(CFrame.new(vec3.X, vec3.Y + 3, vec3.Z));

                            if isDone then
                                holdKey("E");
                                if not workspace:FindFirstChild("Effects"):FindFirstChild("Key") then
                                    releaseKey("E");
                                    ImpelCheckpoint = ImpelCheckpoint + 1;
                                end;
                            end;
                        elseif keyFound then
                            ImpelCheckpoint = ImpelCheckpoint + 1;
                        else
                            if Nearest and Nearest:FindFirstChild("HumanoidRootPart") and (hrp.Position - Nearest:FindFirstChild("HumanoidRootPart").Position).Magnitude <= 300 then
                                TweenTo(Nearest:FindFirstChild("HumanoidRootPart").CFrame);
                            end;
                        end;
                    end;
                elseif ImpelCheckpoint == 1 then
                    local isDone = TweenTo(Checkpoints[1].CFrame);

                    if isDone then
                        if (Nearest and Nearest:FindFirstChild("HumanoidRootPart") and (hrp.Position - Nearest:FindFirstChild("HumanoidRootPart").Position).Magnitude >= 300) then
                            ImpelCheckpoint = ImpelCheckpoint + 1;
                        else
                            if Nearest and Nearest:FindFirstChild("HumanoidRootPart") then
                                TweenTo(Nearest:FindFirstChild("HumanoidRootPart").CFrame);
                            end;
                        end;
                    end;
                elseif ImpelCheckpoint == 2 then
                    local isDone = TweenTo(Checkpoints[2].CFrame);

                    if isDone and Nearest and Nearest:FindFirstChild("HumanoidRootPart") and (hrp.Position - Nearest:FindFirstChild("HumanoidRootPart").Position).Magnitude <= 75 then
                        ImpelCheckpoint = ImpelCheckpoint + 1;
                    end;
                else
                    pressKey("E");
                    if Nearest and Nearest:FindFirstChild("HumanoidRootPart") then
                        if Nearest:FindFirstChild("Festival ShieldSword") then
                            if Nearest:FindFirstChild("HumanoidRootPart"):FindFirstChildOfClass("BodyVelocity") then
                                kelvin = true;
                                TweenTo(Nearest:FindFirstChild("HumanoidRootPart").CFrame * CFrame.new(0, 30, 0));
                                lastMob = tick();
                            else
                                if kelvin then
                                    TweenTo(Nearest:FindFirstChild("HumanoidRootPart").CFrame * CFrame.new(0, 0, 10));
                                    lastMob = tick();
                                else
                                    TweenTo(Nearest:FindFirstChild("HumanoidRootPart").CFrame * CFrame.new(0, 30, 0));
                                    lastMob = tick();
                                end;
                            end;
                        else
                            kelvin = false;
                            TweenTo(Nearest:FindFirstChild("HumanoidRootPart").CFrame);
                            lastMob = tick();
                        end;
                    else
                        if Checkpoints[ImpelCheckpoint] and tick() - lastMob >= .5 + (Checkpoints[ImpelCheckpoint - 1].Wait or 0) + ((GetSpeed() >= 150 and 1.5) or 0) then
                            if ImpelCheckpoint == 47 and not autoRedo then continue; end;
                            if ImpelCheckpoint == 46 and tick() - (startTick or tick()) <= timeToDo then continue; end;

                            local isDone = TweenTo(Checkpoints[ImpelCheckpoint].CFrame);

                            if isDone then
                                ImpelCheckpoint = ImpelCheckpoint + 1;
                                lastMob = tick();
                            end;
                        end;
                    end;
                end;
            else
                TweenTo();
            end;

            RunService.Heartbeat:Wait();
        end;
        TweenTo();
    end,
});

local autoRedo = Section:CreateToggle({
    Text = "Auto Redo",
    Default = false,
    Flag = "autoRedo_Flag",

    Callback = function(Value)
        getgenv().autoRedo = Value;
    end,
});

Section:CreateDivider();

local SetSpeed = Section:CreateSlider({
    Text = "Tween Speed",
    Default = 49,
    Max = 5000,
    Min = 0,
    Flag = "TweenSpeed_Flag",

    Callback = function(Value)
        Storage['TweenSpeed'] = Value;
    end,
});

local AutoSpeed = Section:CreateToggle({
    Text = "Autolimit Speed",
    Default = false,
    Flag = "AutoSpeed_Flag",

    Callback = function(Value)
        getgenv().Autolimit_Speed = Value;

        while Autolimit_Speed do
            SetSpeed:SetValue(GetSpeed());
            RunService.Heartbeat:Wait();
        end;
    end,
});

Section:CreateDivider();

local SpeedBypasses = Section:CreateDropdown({
    Text = "Speed Bypasses",
    Multi = true,
    Options = { "Geppo", "Dash", "Pika", "Gomu" },
    Flag = "SpeedBypasses_Flag",

    Callback = function(Value)
        getgenv().CurrentBypasses = Value;
    end,
});

Section:CreateDivider();

local FlowerStack = Section:CreateToggle({
    Text = "Stack Flower Sword",
    Default = false,
    Flag = "FlowerStacker",

    Callback = function(Value)
        getgenv().FlowerStack = Value;

        while FlowerStack do
            game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("Skill"):InvokeServer(
                "Absolute Seduction");
            task.wait();
        end;
    end,
});

local Noclip = Section:CreateToggle({
    Text = 'Toggle Noclip',
    Default = false,
    Flag = "Plr_Noclip_Flag",

    Callback = function(Value)
        getgenv().noclip = Value
        while noclip do
            RunService.Heartbeat:Wait();

            pcall(function()
                for i, v in pairs(game.Players.LocalPlayer.Character:GetDescendants()) do
                    if v:IsA('BasePart') then
                        v.CanCollide = false;
                    end;

                    if v:IsA('MeshPart') then
                        v.CanCollide = false;
                    end;
                end;
            end);
        end;
    end,
});

Section:CreateDivider();

local TimeTaken = Section:CreateSlider({
    Text = "Minimum TTC (Time to Complete)",
    Default = 8,
    Max = 16,
    Min = 6,
    Flag = "timeToDo_Flag",

    Callback = function(Value)
        getgenv().timeToDo = Value * 60;
    end,
});

local TimeTaken = Section:CreateLabel({Text = "-- IF TO LOW U GET SHADOW BANNED (NO TRADING NO OPENING CHESTS)"});

Library:LoadSettings();
